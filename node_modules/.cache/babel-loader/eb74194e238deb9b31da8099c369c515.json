{"ast":null,"code":"var _jsxFileName = \"/Users/jonathan.picovsky/Desktop/react-project-2-picojp32/TweetApp/src/components/Tweet.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport moment from \"moment\";\nimport List from \"./List\";\nimport Loader from \"./Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tweet = props => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const maxLength = 140;\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [tweetData, setTweetData] = useState([]);\n\n  const textHandler = e => {\n    setText(e.target.value);\n  };\n\n  const handleClick = e => {\n    setIsLoading(true);\n    const tweetPostData = {\n      content: text,\n      userName: props.user,\n      date: moment().format()\n    };\n    const request = {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(tweetPostData)\n    };\n    fetch(\"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\", request).then(response => response.json()).then(data => setTweetData([...tweetData, data]));\n    setText('');\n    setTimeout(() => {\n      window.location.reload();\n      setIsLoading(false);\n    }, [500]);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(\"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\").then(response => {\n      response.json().then(data => {\n        localStorage.getItem(\"profileName\", props.user);\n        setTweetData(data.tweets.filter(tweets => tweets.userName === props.user));\n      });\n    });\n    setIsLoading(false);\n  }, [props.user]);\n  useEffect(() => {\n    if (text.length < maxLength) {\n      setIsDisabled(false);\n    } else {\n      setIsDisabled(true);\n    }\n\n    if (text.length >= maxLength) {\n      alert(\"The tweet can't contain more then 140 chars.\");\n    }\n  }, [text.length]);\n  useEffect(() => {\n    if (!tweetData.user) {\n      setIsDisabled(true);\n    } else {\n      setIsDisabled(false);\n    }\n  }, [tweetData]);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"10\",\n      cols: \"100\",\n      name: \"text\",\n      className: \"tweet\",\n      value: text,\n      maxLength: maxLength,\n      placeholder: \"Enter tweet...\",\n      onInput: textHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), !isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick // disabled={isDisabled}\n      ,\n      type: \"submit\",\n      className: `submit-button submit-button-${isDisabled}`,\n      children: \"Tweet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      tweetData: tweetData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tweet, \"7xVxAkQS9Wr41nhIkb9WyTs53t4=\");\n\n_c = Tweet;\nexport default Tweet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tweet\");","map":{"version":3,"sources":["/Users/jonathan.picovsky/Desktop/react-project-2-picojp32/TweetApp/src/components/Tweet.js"],"names":["useState","useEffect","moment","List","Loader","Tweet","props","text","setText","maxLength","isDisabled","setIsDisabled","isLoading","setIsLoading","tweetData","setTweetData","textHandler","e","target","value","handleClick","tweetPostData","content","userName","user","date","format","request","method","headers","body","JSON","stringify","fetch","then","response","json","data","setTimeout","window","location","reload","localStorage","getItem","tweets","filter","length","alert"],"mappings":"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","sourcesContent":["import { useState, useEffect} from \"react\";\nimport \"../App.css\"\nimport moment from \"moment\";\nimport List from \"./List\"\nimport Loader from \"./Loader\"\n\nconst Tweet = (props) => {\n  const [text, setText] = useState(\"\");\n  const maxLength = 140;\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [tweetData, setTweetData] = useState([]);\n\n  const textHandler = (e) => {\n    setText(e.target.value);\n  };\n\n  const handleClick = (e) => {\n    setIsLoading(true);\n    const tweetPostData = {\n      content: text,\n      userName: props.user,\n      date: moment().format(),\n    };\n\n    const request = {\n      method: 'POST',\n      headers: \n        {\n          \"Content-Type\": \"application/json\",\n        },\n      body: JSON.stringify(tweetPostData)  \n    };\n \n    fetch(\"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\", request)\n    .then(response => response.json())\n    .then(data => setTweetData([...tweetData,data]))\n    setText('');\n    setTimeout(()=>{\n      window.location.reload()\n      setIsLoading(false);\n    },[500])\n  };\n\n  useEffect(() => {\n    setIsLoading(true); \n    fetch(\"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\")\n    .then((response) => {\n      response.json().then(data => {\n        localStorage.getItem(\"profileName\",props.user)\n        setTweetData(data.tweets.filter(tweets => tweets.userName === props.user))\n         })\n    })\n    setIsLoading(false);\n  }, [props.user]); \n\n  useEffect(() => {\n    if (text.length < maxLength) {\n      setIsDisabled(false);\n    } else {\n      setIsDisabled(true);\n    } if (text.length >= maxLength){\n      alert(\"The tweet can't contain more then 140 chars.\") \n    }\n  }, [text.length]);\n\n  useEffect (() =>{\n    if(!tweetData.user) {\n      setIsDisabled(true);\n    } else{\n      setIsDisabled(false)\n    }\n  }, [tweetData]);\n\n  return (\n\n    <form className=\"form-container\">\n      <textarea\n        rows='10'\n        cols='100'\n        name='text'\n        className='tweet'\n        value={text}\n        maxLength= {maxLength}\n        placeholder='Enter tweet...'\n        onInput={textHandler}\n      />\n   {!isLoading && (\n      <button\n        onClick={handleClick}\n        // disabled={isDisabled}\n        type=\"submit\"\n        className={`submit-button submit-button-${isDisabled}`}>\n        Tweet\n      </button>\n    )}\n    {isLoading && <Loader />}\n    <List tweetData={tweetData} />\n    </form> \n  ); \n}\n\n\nexport default Tweet;"]},"metadata":{},"sourceType":"module"}